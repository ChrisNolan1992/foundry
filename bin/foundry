#!/usr/bin/env node

// Load in dependencies
var async = require('async');

// TODO: Move all CLI logic into a `lib` (even though a lot of this is going to get broken down)
var Command = require('commander').Command;

module.exports = function () {
  var shell = require('shelljs');

  // Set up program
  var program = new Command();
  var preRelease = require('./pre-release');
  var postRelease = require('./post-release');

  function gitTag(version, cb) {
    var shell = require('shelljs');
    shell.exec('git commit -a -m "Release ' + version + '"');
    shell.exec('git tag ' + version + ' -a -m "Release ' + version + '"');
    shell.exec('git push');
    shell.exec('git push --tags ');
    cb();
  }

  // Set up commands
  // TODO: Following iterations ($EDITOR for message, try to update changelog)
  program
    .command('release <version>')
    .description('Set version for package.json, bower, component, git tag, and setup.py and publish to corresponding registries')
    .action(function release (version, argv) {
      // DEV: This is directly mimicking behavior from `git-release`
      async.series([
        preRelease.bind(this, version),
        gitTag.bind(this, version),
        postRelease.bind(this, version)
      ], function handleError (err) {
        console.log('aaa');
        if (err) {
          throw err;
        }
      });
    });

  // Return our program
  return program;
};

if (module.parent === null) {
  // Create a new program
  var program = new module.exports();
  program.version(require('../package').version);

  // Parse the arguments
  program.parse(process.argv);

  // If there weren't enough arguments, display help
  if (process.argv.length <= 2) {
    program.outputHelp();
  }
}